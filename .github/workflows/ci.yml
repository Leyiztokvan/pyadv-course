name: CI

# specify when you want the test to be executed, that what happens here in "on" section 
# here the tests/actions are executed when there is a push on the main branch
# workflow_dispatch is refering that you can manually run the actions on github (by pressing a button on github)
# schdule: specifies when and how often the tests are executed automatically, beside the specification we did in on to run the test when there is a push on the main branch
on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:
  schedule:
    # run every week (for --pre release tests)
    - cron: "0 0 * * 0"

# cancel in-progress runs that use the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# jobs: are the set of things/commands the it will be runned 
# runs-on: specifies the hardware the test are executed on
jobs:
  check-manifest:
    # check-manifest is a tool that checks that all files in version control are
    # included in the sdist (unless explicitly excluded)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pipx run check-manifest

# strategy, matrix: specify the OS, python versions and so on that the text are executed on 
# then in name: we specify the matrix.platform and the matrix.python-version  
  test:
    name: ${{ matrix.platform }} (${{ matrix.python-version }})
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        platform: [ubuntu-latest, macos-latest, windows-latest]
# steps: are the actual steps that going to be runned, each step in a block, here we have multiple steps
# you can check what those actions do by searching in the web e.g. search for "actions/checkout@v4"
# steps with the keyword "run" are similar to run commands in terminal, e.g. here: name: Install Dependencies run: |python -m pip install -U pip
    steps:
      - uses: actions/checkout@v4

      - name: üêç Set up Python ${{ matrix.python-version }}
# the action "actions/setup-python@v5" setsup/installs python on the hardware the test/actions are runned on
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache-dependency-path: "pyproject.toml"
          cache: "pip"

      - name: Install Dependencies
        run: |
          python -m pip install -U pip
          # if running a cron job, we add the --pre flag to test against pre-releases
          python -m pip install .[test] ${{ github.event_name == 'schedule' && '--pre' || ''  }}
# step to run the test we defined in "tests/test_pyadv_course_leyiztokvan" using the "pytest" module
      - name: üß™ Run Tests
        run: pytest --color=yes --cov --cov-report=xml --cov-report=term-missing

      # If something goes wrong with --pre tests, we can open an issue in the repo
      - name: üìù Report --pre Failures
        if: failure() && github.event_name == 'schedule'
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PLATFORM: ${{ matrix.platform }}
          PYTHON: ${{ matrix.python-version }}
          RUN_ID: ${{ github.run_id }}
          TITLE: "[test-bot] pip install --pre is failing"
        with:
          filename: .github/TEST_FAIL_TEMPLATE.md
          update_existing: true

      - name: Coverage
        uses: codecov/codecov-action@v3
# we have to first test the package before deploing it
  deploy:
    name: Deploy
    needs: test
# here I disabled that the package is deployed on a schedule
    if: success() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing on PyPi
      # see https://docs.pypi.org/trusted-publishers/
      id-token: write
      # This permission allows writing releases
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
# with name: Build, we build the package
# if we build the package manually with "python -m build", then there will be a new folder "dist" created with the executable package that can be downloaded
# we can automate this process usin github by using the github action "with: repository-url: https/test.pypi.org/legacy", as it is in here
      - name: üë∑ Build
        run: |
          python -m pip install build
          python -m build

      - name: üö¢ Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/


      - uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: './dist/*'
